<?xml version="1.0"?>
<doc>
    <assembly>
        <name>server-server-sync-lib</name>
    </assembly>
    <members>
        <member name="T:Microsoft.UpdateServices.Compression.CabinetUtility">
            <summary>
            Performs CAB compression and decompression. Works on Windows only
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Compression.CabinetUtility.DecompressData(System.Byte[])">
            <summary>
            Decompress an in-memory cabinet archive
            </summary>
            <param name="compressedData">The compressed data to decompress</param>
            <returns>The decompressed data as string</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Compression.CabinetUtility.CompressFiles(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Compress a list of files
            </summary>
            <param name="filePaths">Files to compress</param>
            <param name="outFile">Destination cab file</param>
            <returns>True on success, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Compression.CabinetUtility.CreateMakeCabDirective(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Creates a directive file for compressing multiple files
            </summary>
            <param name="files">List of files to add to the directive file</param>
            <param name="outFile">Ouput file to set in the directive file</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Client.ClientAuthenticator">
            <summary>
            Implements authentication with an upstream update server.
            <para>
            Use the ClientAuthenticator to obtain an access token for accessing metadata and content on an upstream update server.
            </para>
            </summary>
            <example>
            <code>
            var authenticator = new ClientAuthenticator(Endpoint.Default);
            var accessToken = await authenticator.Authenticate();
            </code>
            </example>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.ClientAuthenticator.UpstreamEndpoint">
            <summary>
            Gets the update server endpoint this instance of ClientAuthenticator authenticates with.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ClientAuthenticator.#ctor(Microsoft.UpdateServices.Client.Endpoint)">
            <summary>
            Initializes a new instance of the ClientAuthenticator class to authenticate with the specified endpoint.
            </summary>
            <param name="endpoint">The endpoint to authenticate with.</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ClientAuthenticator.#ctor">
            <summary>
            Initializes a new instance of the ClientAuthenticator that authenticates with the official
            Microsoft upstream update server.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.ClientAuthenticator.AccountName">
            <summary>
            Account name used when authenticating. If null, a random GUID string is used.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.ClientAuthenticator.AccountGuid">
            <summary>
            Account GUID used for authenticating. If null, a random GUID is used
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ClientAuthenticator.#ctor(Microsoft.UpdateServices.Client.Endpoint,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the ClientAuthenticator class to authenticate with the specified endpoint, using
            specified credentials.
            </summary>
            <param name="endpoint">The endpoint to authenticate with.</param>
            <param name="accountName">Account name.</param>
            <param name="accountGuid">Account GUID.</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ClientAuthenticator.Authenticate(Microsoft.UpdateServices.Client.ServiceAccessToken)">
            <summary>
            Performs authentication with an upstream update server, using a previously issued service access token.
            </summary>
            <remarks>
            Refreshing an old token with this method is faster than obtaining a new token as it requires fewer server roundtrips.
            
            If the access cookie does not expire within 30 minutes, the function succeeds and the old token is returned.
            </remarks>
            <param name="cachedAccessToken">The previously issued access token.</param>
            <returns>The new ServiceAccessToken</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ClientAuthenticator.Authenticate">
            <summary>
            Performs authentication with an upstream update service.
            </summary>
            <returns>A new access token.</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ClientAuthenticator.GetAuthenticationInfo">
            <summary>
            Retrieves authentication information from a WSUS server.
            </summary>
            <returns>List of supported authentication methods</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ClientAuthenticator.GetAuthorizationCookie(Microsoft.UpdateServices.WebServices.ServerSync.AuthPlugInInfo)">
            <summary>
            Retrieves an authentication cookie from a DSS service.
            </summary>
            <returns>An authentication cookie</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ClientAuthenticator.GetServerAccessCookie(Microsoft.UpdateServices.WebServices.DssAuthentication.AuthorizationCookie)">
            <summary>
            Retrieves a server access cookie based on an authentication cookie.
            </summary>
            <param name="authCookie">The auth cookie to use when requesting the access cookie</param>
            <returns>An access cookie</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Client.Endpoint">
            <summary>
            Identifies an Upstream Update Server.
            <para>
            Use <see cref="P:Microsoft.UpdateServices.Client.Endpoint.Default"/> to get the endpoint of the official Microsoft Upstream Update Server.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.Endpoint.MicrosoftUpstreamRoot">
            <summary>
            The Microsoft upstream server root address. Used to construct the default endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.Endpoint.URI">
            <summary>
            Gets the absolute URI of the upstream server.
            </summary>
            <value>
            Absolute URI string to upstream server.
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.Endpoint.ServerSyncURI">
            <summary>
            Gets the absolute URI of the server-to-server sync webservice.
            </summary>
            <value>
            Absolute URI string to server-server sync webservice.
            </value>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.Endpoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Endpoint class, with the specified URI to the upstream update server
            </summary>
            <param name="uri">Absolute URI of the upstream update server</param>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.Endpoint.Default">
            <summary>
            Gets the endpoint of the official Microsoft upstream update server
            </summary>
            <value>
            Upstream update server endpoint
            </value>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.Endpoint.GetAuthenticationEndpointFromRelativeUrl(System.String)">
            <summary>
            Creates a complete URL to a DSS authentication web service based on the upstream URL and the DSS relative URL
            </summary>
            <param name="serviceRelativeUrl">The DSS service URL (relative)</param>
            <returns>The complete URL to the DSS authentication endpoint</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Client.MetadataQueryStage">
            <summary>
            The MetadataQueryStage enumeration represents, for reporting purposes, the possible execution states of an update metadata query.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.Unknown">
            <summary>
            The query is being prepared.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.AuthenticateStart">
            <summary>
            Authentication is starting.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.AuthenticateEnd">
            <summary>
            Authentication ended.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.GetServerConfigStart">
            <summary>
            Retrieving server configuration. The server configuration is required before retrieving updates metadata.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.GetServerConfigEnd">
            <summary>
            Server configuration retrieval is complete.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.GetRevisionIdsStart">
            <summary>
            Getting the list of update IDs (or category IDs).
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.GetRevisionIdsEnd">
            <summary>
            The list of update IDs has been retrieved
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.GetUpdateMetadataStart">
            <summary>
            Start getting metadata for all retrieved updated IDs
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.GetUpdateMetadataProgress">
            <summary>
            Progress while getting update metadata. Reports percent progress.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.MetadataQueryStage.GetUpdateMetadataEnd">
            <summary>
            Metadata retrieval is complete
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Client.MetadataQueryProgress">
            <summary>
            Provides progress data for a metadata query.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.MetadataQueryProgress.PercentDone">
            <summary>
            Percent done. Not all query stages support progress reporting.
            </summary>
            <value>
            Percent done value, in the [0,100] range.
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.MetadataQueryProgress.Maximum">
            <summary>
            Number of work items in a stage. Reported only for stages that support percent done reporting. 
            </summary>
            <value>
            Number of work items (updates, etc.) to process
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.MetadataQueryProgress.Current">
            <summary>
            Number of work items processed. Reported only for stages that support percent done reporting.
            </summary>
            <value>
            Number of work items (updates, etc.) processed so far.</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.MetadataQueryProgress.CurrentTask">
            <summary>
            The current stage in the query.
            </summary>
            <value>One of the possible stages from <see cref="T:Microsoft.UpdateServices.Client.MetadataQueryStage"/></value>
        </member>
        <member name="T:Microsoft.UpdateServices.Client.ServiceAccessToken">
            <summary>
            Grants access to an upstream update server. Requried for most requests to an update server.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.ServiceAccessToken.AuthenticationInfo">
            <summary>
            Authentication data received from an update server
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.ServiceAccessToken.AuthCookie">
            <summary>
            Authorization cookie received from a DSS
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.ServiceAccessToken.AccessCookie">
            <summary>
            Access cookie received from the upstream update server
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.ServiceAccessToken.Expired">
            <summary>
            Check if the access token is expired
            </summary>
            <value>True is expired, false otherwise</value>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ServiceAccessToken.ExpiresIn(System.TimeSpan)">
            <summary>
            Check if the access token will expire within the specified time span
            </summary>
            <param name="timeSpan">Time span from current time.</param>
            <returns>True if the token will expire before the timespan passes, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ServiceAccessToken.ToJson">
            <summary>
            Serializes an instance of <see cref="T:Microsoft.UpdateServices.Client.ServiceAccessToken"/> to JSON
            </summary>
            <returns>JSON string</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.ServiceAccessToken.FromJson(System.String)">
            <summary>
            Deserialize an instance of <see cref="T:Microsoft.UpdateServices.Client.ServiceAccessToken"/> from a JSON string.
            </summary>
            <param name="json">The JSON string containing the serialized ServiceAccessToken</param>
            <returns>Deserialiazed ServiceAccessToken</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Client.UpstreamServerClient">
            <summary>
            Query updates, metadata and content from an upstream update server.
            Results are returned as <see cref="T:Microsoft.UpdateServices.Storage.IMetadataSource"/>, through which advanced queries and filtering can be performed.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Client.UpstreamServerClient.UpstreamEndpoint">
            <summary>
            Gets the update server <see cref="T:Microsoft.UpdateServices.Client.Endpoint"/> this client connects to.
            </summary>
            <value>
            Update server <see cref="T:Microsoft.UpdateServices.Client.Endpoint"/>
            </value>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.UpstreamServerClient.ServerSyncClient">
            <summary>
            Client used to issue SOAP requests
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.UpstreamServerClient.AccessToken">
            <summary>
            Cached access cookie. If not set in the constructor, a new access token will be obtained
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.UpstreamServerClient.ConfigData">
            <summary>
            Service configuration data. Contains maximum query limits, etc.
            If not passed to the constructor, this class will retrieve it from the service
            </summary>
        </member>
        <member name="E:Microsoft.UpdateServices.Client.UpstreamServerClient.MetadataQueryProgress">
            <summary>
            Raised on progress during a metadata query. Reports the current query stage.
            </summary>
            <value>Progress data</value>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetQueryResultFileName">
            <summary>
            Generate a unique file name for saving the results of a query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.#ctor(Microsoft.UpdateServices.Client.Endpoint)">
            <summary>
            Initializes a new instance of UpstreamServerClient.
            </summary>
            <param name="upstreamEndpoint">The server endpoint this client will connect to.</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.RefreshAccessToken(System.String,System.Nullable{System.Guid})">
            <summary>
            Updates the access token of this client
            </summary>
            <returns>Nothing</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.RefreshServerConfigData">
            <summary>
            Updates the server config data for this client
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetServerConfigData">
            <summary>
            Retrieves configuration data from the upstream server.
            </summary>
            <returns>Server configuration data</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetCategories(Microsoft.UpdateServices.Storage.IMetadataSink)">
            <summary>
            Gets the list of categories from the upstream server and adds them to the specified metadata collection.
            </summary>
            <param name="destination">Metadata collection where to add the results. If the collection implements <see cref="T:Microsoft.UpdateServices.Storage.IMetadataSource"/>, only delta changes are retrieved and added to the destination.</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetCategories">
            <summary>
            Gets the list of categories from the upstream update server.
            </summary>
            <returns>An updates metadata source containing all.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetUpdates(Microsoft.UpdateServices.Metadata.QueryFilter,Microsoft.UpdateServices.Storage.IMetadataSink)" -->
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetUpdates(Microsoft.UpdateServices.Metadata.QueryFilter)">
            <summary>
            Gets updates matching the query filter from an upstream update server.
            </summary>
            <param name="updatesFilter">Updates filter. See <see cref="T:Microsoft.UpdateServices.Metadata.QueryFilter"/> for details.</param>
            <returns>An updates metadata source containing updates that match the filter.</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.QueryConfigData">
            <summary>
            Retrieves configuration data from the service
            </summary>
            <returns>The service configuration</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetCategoryIds(System.String)">
            <summary>
            Retrieves category IDs from the update server: classifications, products and detectoids
            </summary>
            <param name="oldAnchor">The anchor returned by a previous call to this function. Can be null.</param>
            <returns>The list of category IDs and an anchor. If an anchor was passed in, the
            list of category IDs is a delta list of categories changed since the anchor was generated.</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetUpdateIds(Microsoft.UpdateServices.Metadata.QueryFilter)">
            <summary>
            Retrieves category IDs from the update server: classifications, products and detectoids
            </summary>
            <param name="filter">The filter to use.</param>
            <returns>The list of category IDs and an anchor. If teh filter contains an anchor, the
            list of category IDs is a delta list of categories changed since the anchor was generated.</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetUpdateDataForIds(System.Collections.Generic.List{Microsoft.UpdateServices.WebServices.ServerSync.UpdateIdentity},Microsoft.UpdateServices.Storage.IMetadataSink)">
            <summary>
            Retrieves update data for the list of update ids
            </summary>
            <param name="updateIds">The ids to retrieve data for</param>
            <param name="destination">The metadata destination to write update metadata to</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.CreateBatchedListFromFlatList``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Breaks down a flat list of objects in a list of batches, each batch having a maximum allowed size
            </summary>
            <typeparam name="T">The type of objects to batch</typeparam>
            <param name="flatList">The flat list of objects to break down</param>
            <param name="maxBatchSize">The maximum size of a batch</param>
            <returns>The batched list</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerClient.GetUnchangedUpdates(System.Collections.Generic.IReadOnlyDictionary{Microsoft.UpdateServices.Metadata.Identity,Microsoft.UpdateServices.Metadata.Update},System.Collections.Generic.IEnumerable{Microsoft.UpdateServices.Metadata.Identity})">
            <summary>
            Given a list of cached updates and a list of new update identities( ID+revision), returns
            those cached updates that did not change.
            </summary>
            <param name="cachedUpdates">List of locally cached updates</param>
            <param name="newUpdateIds">List of new update identities reported by the upstream server</param>
            <returns>List of locally cached updates that did not change</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Client.UpstreamServerErrorCode">
            <summary>
            The UpstreamServerErrorCode enumeration contains errors than an upstream server can return with a SOAP reply.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.UpstreamServerErrorCode.InvalidAuthorizationCookie">
            <summary>
            The authorization cookie was invalid
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.UpstreamServerErrorCode.IncompatibleProtocolVersion">
            <summary>
            The protocol version is not compatible with the server
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.UpstreamServerErrorCode.InternalServerError">
            <summary>
            Internal server error
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.UpstreamServerErrorCode.InvalidParameters">
            <summary>
            The parametes sent to the server are invalid
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.UpstreamServerErrorCode.Unknown">
            <summary>
            Unknown other errors
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Client.UpstreamServerException">
            <summary>
            The exception that is thrown when an error code is received from an upstream update server.
            It contains an inner SOAP FaultException.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Client.UpstreamServerException.ErrorCode">
            <summary>
            Gets the UpstreamServerErrorCode received over SOAP from the server
            </summary>
            <value>
            Error code reported by the upstream server.
            </value>
        </member>
        <member name="M:Microsoft.UpdateServices.Client.UpstreamServerException.#ctor(System.ServiceModel.FaultException)">
            <summary>
            Initialize a new instance of UpstreamServerException from a SOAP FaultException.
            </summary>
            <param name="soapException">The inner SOAP exception.</param>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.Cookie">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.Cookie.Expiration">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.Cookie.EncryptedData">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.SuccessFlag">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ServicesTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ServicesName">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ServicesMachine">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.IsHttps">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.RequestContentType">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ConfigFilePath">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ConfigFileProjectName">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ConfigFileEnvironmentName">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ConfigFileLastModifiedTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ConfigFileVersion">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ConfigFileNextExpirationTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.ConfigFileExpirationModuloInMinutes">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.DatabaseInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.MonitoredServicesResponse.CustomInfo">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupUpdateStatus">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupUpdateStatus.UpdateId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupUpdateStatus.SummarizationState">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupUpdateStatus.LastChangeTime">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupInfo.InstanceId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupInfo.ComputerId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupInfo.EffectiveLastDetectionTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupInfo.RollupNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupInfo.IsFullRollup">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerStatusRollupInfo.UpdateStatus">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerLastRollupNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerLastRollupNumber.ComputerId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerLastRollupNumber.RollupNumber">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ChangedComputer">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ChangedComputer.ComputerId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ChangedComputer.Change">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerChangeType">
            <remarks/>
        </member>
        <member name="F:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerChangeType.Deleted">
            <remarks/>
        </member>
        <member name="F:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerChangeType.NewParent">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.TargetGroupIdList">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.RequestedTargetGroupNames">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.IPAddress">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.FullDomainName">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.OSMajorVersion">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.OSMinorVersion">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.OSBuildNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.OSServicePackMajorNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.OSServicePackMinorNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.OSLocale">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.OSFamily">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.OSDescription">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.ComputerMake">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.ComputerModel">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.BiosVersion">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.BiosName">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.BiosReleaseDate">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.ProcessorArchitecture">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.SuiteMask">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.OldProductType">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.NewProductType">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.SystemMetrics">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupDetails.ClientVersion">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupInfo.Details">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupInfo.ComputerId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupInfo.LastSyncTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupInfo.LastSyncResult">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupInfo.LastReportedRebootTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupInfo.LastReportedStatusTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupInfo.LastInventoryTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerRollupInfo.ParentServerId">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientActivitySummary">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientActivitySummary.UpdateId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientActivitySummary.RevisionNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientActivitySummary.InstallSuccessCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientActivitySummary.InstallFailureCount">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.OSMajorVersion">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.OSMinorVersion">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.OSBuildNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.OSServicePackMajorNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.OSServicePackMinorNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.OSLocale">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.SuiteMask">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.OldProductType">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.NewProductType">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.SystemMetrics">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.ProcessorArchitecture">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.Count">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupClientSummary.ActivitySummaries">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.UpdateCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.DeclinedUpdateCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.ApprovedUpdateCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.NotApprovedUpdateCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.UpdatesWithStaleUpdateApprovalsCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.ExpiredUpdateCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.CriticalOrSecurityUpdatesNotApprovedForInstallCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.WsusInfrastructureUpdatesNotApprovedForInstallCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.UpdatesWithClientErrorsCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.UpdatesWithServerErrorsCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.UpdatesNeedingFilesCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.UpdatesNeededByComputersCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.UpdatesUpToDateCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.CustomComputerTargetGroupCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.ComputerTargetCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.ComputerTargetsNeedingUpdatesCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.ComputerTargetsWithUpdateErrorsCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupServerSummary.ComputersUpToDateCount">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo.ServerId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo.FullDomainName">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo.LastSyncTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo.ParentServerId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo.Version">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo.IsReplica">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo.LastRollupTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo.ServerSummary">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DownstreamServerRollupInfo.ClientSummaries">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.RollupConfiguration">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.RollupConfiguration.DoDetailedRollup">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.RollupConfiguration.RollupResetGuid">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.RollupConfiguration.ServerId">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.RollupConfiguration.RollupDownstreamServersMaxBatchSize">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.RollupConfiguration.RollupComputersMaxBatchSize">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.RollupConfiguration.GetOutOfSyncComputersMaxBatchSize">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.RollupConfiguration.RollupComputerStatusMaxBatchSize">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ReportingInventory">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ReportingInventory.IsCompressed">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ReportingInventory.RawXml">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ReportingInventory.CompressedXml">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.PrivateData">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.PrivateData.ComputerDnsName">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.PrivateData.UserAccountName">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.DetailedVersion">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DetailedVersion.Major">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DetailedVersion.Minor">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DetailedVersion.Build">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DetailedVersion.Revision">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DetailedVersion.ServicePackMajor">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.DetailedVersion.ServicePackMinor">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData.ReplacementStrings">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData.MiscData">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData.ComputerBrand">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData.ComputerModel">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData.BiosRevision">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData.ProcessorArchitecture">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData.OSVersion">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData.OSLocaleID">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ExtendedData.DeviceID">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ProcessorArchitecture">
            <remarks/>
        </member>
        <member name="F:Microsoft.UpdateServices.WebServices.ServerReporting.ProcessorArchitecture.Unknown">
            <remarks/>
        </member>
        <member name="F:Microsoft.UpdateServices.WebServices.ServerReporting.ProcessorArchitecture.X86Compatible">
            <remarks/>
        </member>
        <member name="F:Microsoft.UpdateServices.WebServices.ServerReporting.ProcessorArchitecture.IA64Compatible">
            <remarks/>
        </member>
        <member name="F:Microsoft.UpdateServices.WebServices.ServerReporting.ProcessorArchitecture.Amd64Compatible">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.UpdateRevisionIdentifier">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.UpdateRevisionIdentifier.UpdateID">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.UpdateRevisionIdentifier.RevisionNumber">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerTargetIdentifier">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ComputerTargetIdentifier.Sid">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.TargetID">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.SequenceNumber">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.TimeAtTarget">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.EventInstanceID">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.NamespaceID">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.EventID">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.SourceID">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.UpdateID">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.Win32HResult">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.BasicData.AppName">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.WebServices.ServerReporting.ReportingEvent">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ReportingEvent.BasicData">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ReportingEvent.ExtendedData">
            <remarks/>
        </member>
        <member name="P:Microsoft.UpdateServices.WebServices.ServerReporting.ReportingEvent.PrivateData">
            <remarks/>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.BundlesUpdatesParser">
            <summary>
            Parses bundled updates information from update XML blob
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Classification">
             <summary>
             Represents a Classification. Used to clasify updates on an upstream server.
             <para>
             Example classifications: drivers, security updates, feature packs etc.
             </para>
             </summary>
             <example>
             <code>
             // Query categories
             var categoriesSource = await server.GetCategories();
             
             // Get classifications
             var classifications = categoriesSource.ClassificationsIndex.Values;
            
             // Delete the query result from disk when done with it.
             categoriesSource.Delete();
             </code>
             </example>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Detectoid">
             <summary>
             Represents a detectoid. Detectoids determine applicabilty of updates for a computer and as such are used
             as pre-requisites for other updates.
             <para>
             Example detectoids: x64, x86, arm64, DirectX12 supported, etc.
             </para>
             </summary>
             <example>
             <code>
             var categoriesSource = await server.GetCategories();
            
             // Create a filter for quering drivers
             var filter = new QueryFilter(
                  categoriesSource.ProductsIndex.Values,
                  categoriesSource.ClassificationsIndex.Values.Where(c => c.Title.Equals("Driver")));
             
             // Get drivers
             var updatesSource = await server.GetUpdates(filter);
             var drivers = updatesSource.UpdatesIndex.Values.OfType&lt;DriverUpdate&gt;();
             
             updatesSource.Delete();
             categoriesSource.Delete();
             
             </code>
             </example>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.DriverMetadata">
            <summary>
            Extended metadata for a DriverUpdate
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.DriverMetadata.HardwareID">
            <summary>
            Gets the hardware IDs this driver update is applicable to
            </summary>
            <value>
            Hardware ID string
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.DriverMetadata.WhqlDriverID">
            <summary>
            Gets the Windows Hardware Quality Lab driver ID
            </summary>
            <value>
            WHQL driver ID string
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.DriverMetadata.Manufacturer">
            <summary>
            Gets the driver manufacturer
            </summary>
            <value>
            Manufacturer name
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.DriverMetadata.Company">
            <summary>
            Gets the Company that created the driver
            </summary>
            <value>
            Company name
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.DriverMetadata.Provider">
            <summary>
            Gets the entity that provided the driver.
            </summary>
            <value>
            Driver provider name
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.DriverMetadata.DriverVerDate">
            <summary>
            Gets the driver timestamp
            </summary>
            <value>
            Driver timestamp
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.DriverMetadata.DriverVerVersion">
            <summary>
            Gets the driver version
            </summary>
            <value>
            Driver version
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.DriverMetadata.Class">
            <summary>
            Gets the driver class type
            </summary>
            <value>
            Driver class (graphics, USB, etc.)
            </value>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.DriverMetadata.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructor; parses the passed WindowsDriverMetaData XML element
            </summary>
            <param name="xmlMetadata">The WindowsDriverMetaData element to parse data from</param>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.DriverUpdate">
            <summary>
            Represents a driver update.
            </summary>
            <example>
            <code>
            var server = new UpstreamServerClient(Endpoint.Default);
            
            // Query categories
            var categories = await server.GetCategories();
            
            // Create a filter for quering drivers
            var filter = new QueryFilter(
                categories.Updates.OfType&lt;Product&gt;(),
                categories.Updates.OfType&lt;Classification&gt;().Where(c => c.Title.Equals("Driver")));
                
            // Get drivers
            var driversQueryResult = await server.GetUpdates(filter);
            var drivers = driversQueryResult.Updates.OfType&lt;DriverUpdate&gt;();
            </code>
            </example>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.DriverUpdate.Metadata">
            <summary>
            Gets the list of driver update extended metadata.
            </summary>
            <value>
            List of driver metadata (hardware ID, version, etc.)
            </value>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.DriverUpdate.#ctor(Microsoft.UpdateServices.Metadata.Identity,System.Xml.Linq.XDocument)">
            <summary>
            Create a DriverUpdate from an update XML and raw update data
            </summary>
            <param name="id">Update ID</param>
            <param name="xdoc">Update XML document</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.DriverUpdate.LoadAttributesFromMetadataSource">
            <summary>
            Sets extended attributes from the XML metadata.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.DriverUpdate.ParseDriverMetadata(System.Xml.Linq.XDocument)">
            <summary>
             Parse the inner metadata from XML
            </summary>
            <param name="xdoc">Update XML document</param>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Content.UpdateFile">
            <summary>
            Represents a content file for an update.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFile.FileName">
            <summary>
            Gets the name of the file
            </summary>
            <value>
            File name
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFile.Size">
            <summary>
            Ges the file size, in bytes.
            </summary>
            <value>File size</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFile.ModifiedDate">
            <summary>
            Gets the last modified timestamp for the file
            </summary>
            <value>Last modified DateTime</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFile.Digests">
            <summary>
            Gets the list of file digests. Multiple hashing algorithms might be used.
            </summary>
            <value>List of file digests, one per algorithm.</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFile.PatchingType">
            <summary>
            Gets the type of patching this file provides
            </summary>
            <value>Patchin type string</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFile.Urls">
            <summary>
            Gets the list of URLs for the file.
            </summary>
            <value>List of URLs.</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFile.DownloadUrl">
            <summary>
            Gets the default download URL for a file.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFile.GetContentDirectoryName">
            <summary>
            Get the content directory, as per Server-Server sync protocol spec.
            The content directory is the string representation of the last 2 hex digits of the SHA256 hash
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFile.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create a new update file with data parsed from the XML element specified
            </summary>
            <param name="xmlFileElement"></param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFile.Equals(System.Object)">
            <summary>
            Override equality method; two UpdateFile are equal if they have the same content hash.
            </summary>
            <param name="obj">Other UpdateFile</param>
            <returns>True if the two objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFile.GetHashCode">
            <summary>
            Return a hash code based on the hash of the file content.
            </summary>
            <returns>UpdateFile hash code</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Content.UpdateFileDigest">
            <summary>
            Represents digest information for an update content file
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFileDigest.Algorithm">
            <summary>
            Gets the digest algorithm used
            </summary>
            <value>Digest algorithm name</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFileDigest.DigestBase64">
            <summary>
            Gets the base64 encoded digest
            </summary>
            <value>Base64 encoded string</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFileDigest.HexString">
            <summary>
            Gets the HEX string representation of the digest 
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Content.UpdateFileParser">
            <summary>
            Parses file information from update XML blob
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFileParser.Parse(System.Xml.Linq.XDocument,Microsoft.UpdateServices.Storage.IMetadataSource)">
            <summary>
            Create an UpdateFile object with metadata from the XML blob and URLs from the url data array
            </summary>
            <param name="xdoc">The XML element that holds file metadata</param>
            <param name="metadataSource">The metadata source that contains files URL information.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl">
            <summary>
            Represents source information for an update file.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl.DigestBase64">
            <summary>
            Gets the SHA256 digest of the file content
            </summary>
            <value>SHA256 digest, base64 encoded string.</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl.MuUrl">
            <summary>
            Gets the Microsoft Update URL to the file.
            <para>This property is set if the update containing this file was queries from the official
            Microsoft upstream server.</para>
            </summary>
            <value>URL string</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl.UssUrl">
            <summary>
            Gets the upstream server URL to the file.
            <para>This property is set if the update containing his file was queries from a WSUS upstream server.</para>
            </summary>
            <value>URL string</value>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl.#ctor">
            <summary>
            Private constructor for deserialization
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl.#ctor(Microsoft.UpdateServices.WebServices.ServerSync.ServerSyncUrlData)">
            <summary>
            Construct object from raw ServerSyncUrlData
            </summary>
            <param name="serverSyncUrlData"></param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl.Equals(System.Object)">
            <summary>
            Override equality comparison. Two UpdateFileUrl are equal if they have the same content hash.
            </summary>
            <param name="obj">The other UpdateFileUrl</param>
            <returns>True if the two UpdateFileUrl have the same content hash, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl.GetHashCode">
            <summary>
            Returns a hash code based on the content hash.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl.op_Equality(Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl,Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl)">
            <summary>
            Override equality operator to match Equals method.
            </summary>
            <param name="lhs">Left UpdateFileUrl</param>
            <param name="rhs">Right UpdateFileUrl</param>
            <returns>True if the two UpdateFileUrl have the same content hash, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl.op_Inequality(Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl,Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl)">
            <summary>
            Override inequality operator to match Equals method
            </summary>
            <param name="lhs">Left UpdateFileUrl</param>
            <param name="rhs">Right UpdateFileUrl</param>
            <returns>False if the two UpdateFileUrl have the same content hash, true otherwise</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.MetadataFilter">
            <summary>
            Represents a filter that can be applied to update metadata
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.MetadataFilter.ClassificationFilter">
            <summary>
            Get or set the Classification filter. 
            </summary>
            <value>List of classification IDs (ID only, no revision)</value>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.MetadataFilter.ProductFilter">
            <summary>
            Get or set the Product filter.
            </summary>
            <value>List of product IDs (ID only, no revision)</value>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.MetadataFilter.IdFilter">
            <summary>
            Get of set the ID filter.
            </summary>
            <value>List of update IDs (ID only, no revision)</value>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.MetadataFilter.TitleFilter">
            <summary>
            Get or set the title filter.
            </summary>
            <value>Title filter string</value>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.MetadataFilter.SkipSuperseded">
            <summary>
            Get or set whether to filter or not superseded updates
            </summary>
            <value>True to skip superseded updates, false otherwise</value>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.MetadataFilter.FirstX">
            <summary>
            Returns the first X results only
            </summary>
            <value>0 to include all updates, greater than 0 value to limit output.</value>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.MetadataFilter.#ctor">
            <summary>
            Initialize a new filter. A newly initialized filter matches all updates or categories.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.MetadataFilter.FromJson(System.String)">
            <summary>
            Create a filter from JSON
            </summary>
            <param name="source">The JSON string</param>
            <returns>A filter for metadata in a updates metadata source</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.MetadataFilter.ToJson">
            <summary>
            Serializes this filter to JSON
            </summary>
            <returns>The JSON string</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Prerequisites.AtLeastOne">
            <summary>
            A collection of prerequisites, of which at least one must be met for the AtLeastOne prerequisite to be satisfied.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Prerequisites.AtLeastOne.Simple">
            <summary>
            Get the list of simple prerequisites that are part of the group
            </summary>
            <value>
            List of simple prerequisites
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Prerequisites.AtLeastOne.IsCategory">
            <summary>
            Check if the AtLestOne prerequisite is a "category" prerequisite. Category prerequisites are not true prerequisites,
            just a way to encode a product and classification for an update.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Prerequisites.AtLeastOne.#ctor(System.Xml.Linq.XElement)">
            <summary>
            From XML constructor
            </summary>
            <param name="xmlData">XML containing prerequisite data</param>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Prerequisites.CategoryResolver">
            <summary>
            Resolves "IsCategory" prerequisites to a category.
            This is needed because the category and classification for an update is encoded as a prerequisite
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Prerequisites.CategoryResolver.ResolveProductFromPrerequisites(System.Collections.Generic.List{Microsoft.UpdateServices.Metadata.Prerequisites.Prerequisite},System.Collections.Generic.IReadOnlyList{Microsoft.UpdateServices.Metadata.Identity})">
            <summary>
            Resolve product from prerequisites and list of all known products
            </summary>
            <param name="prerequisites">Update prerequisites</param>
            <param name="allProducts">All known products</param>
            <returns>All products that were found in the prerequisites list</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Prerequisites.CategoryResolver.ResolveClassificationFromPrerequisites(System.Collections.Generic.List{Microsoft.UpdateServices.Metadata.Prerequisites.Prerequisite},System.Collections.Generic.HashSet{Microsoft.UpdateServices.Metadata.Identity})">
            <summary>
            Resolve classification from prerequisites and list of all known classifications
            </summary>
            <param name="prerequisites">Update prerequisites</param>
            <param name="allClassifications">All known classifications</param>
            <returns>On success, the GUID of the classification, empty guid otherwise</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Prerequisites.Prerequisite">
            <summary>
            Base, abstract class for update prerequisites.
            <para>See <see cref="T:Microsoft.UpdateServices.Metadata.Prerequisites.Simple"/> and <see cref="T:Microsoft.UpdateServices.Metadata.Prerequisites.AtLeastOne"/> for possible prerequisite classes.</para>
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Prerequisites.Simple">
            <summary>
            Simple prerequisite: a single update ID.
            <para>The update ID contained in a simple prerequisite must be installed before the update that has this prerequisite can be installed.</para>
            <para>The detectoid ID contained in a simple prerequisite must evaluate to true before the update that has this prerequisite can be installed. See <see cref="T:Microsoft.UpdateServices.Metadata.Detectoid"/> for more details.</para>
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Prerequisites.Simple.UpdateId">
            <summary>
            The update ID or detectoid ID that is required before an update can be installed.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Prerequisites.Simple.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initialize a prerequisite from XML data
            </summary>
            <param name="xmlData">The XML that contains the data for the prerequisite</param>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Product">
             <summary>
             Metadata for a product category.
             </summary>
             <example>
             <code>
             // Query categories
             var categoriesSource = await server.GetCategories();
             
             // Get products
             var products = categoriesSource.ProductsIndex.Values;
            
             // Delete the query result from disk when done with it.
             categoriesSource.Delete();
             </code>
             </example>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.QueryFilter">
             <summary>
             Represents a filter used for quering updates. Combines categories and classifications filters
             <para>To create a QueryFilter, query the categories on the upstream server first.</para>
             </summary>
             <example>
             <code>
             var server = new UpstreamServerClient(Endpoint.Default);
             
             var categories = await server.GetCategories();
             
             // Create a filter for first product and all classifications
             var filter = new QueryFilter(
                 categories.Updates.OfType&lt;Product&gt;().Take(1),
                 categories.Updates.OfType&lt;Classification&gt;());
            
             // Get updates
             var updatesQueryResult = await server.GetUpdates(filter);
             </code>
             </example>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.QueryFilter.ProductsFilter">
            <summary>
            Gets the list of products in the filter.
            </summary>
            <value>List of product identities.</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.QueryFilter.ClassificationsFilter">
            <summary>
            Gets the list of classifications in the filter.
            </summary>
            <value>List of classification identities.</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.QueryFilter.Anchor">
            <summary>
            Server returned anchor for this query. Save it to use in the future when using this filter
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.QueryFilter.#ctor(System.String)">
            <summary>
            Create a filter with an anchor and no categories or products
            </summary>
            <param name="anchor"></param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.QueryFilter.#ctor(System.Collections.Generic.List{Microsoft.UpdateServices.Metadata.Update},System.Collections.Generic.List{Microsoft.UpdateServices.Metadata.Update},System.String)">
            <summary>
            Create a filter that contains categories or classifications
            </summary>
            <param name="categories">The categories filter used</param>
            <param name="classifications">The classifications filter used</param>
            <param name="anchor">The anchor received from the service after the query</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.QueryFilter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.UpdateServices.Metadata.Product},System.Collections.Generic.IEnumerable{Microsoft.UpdateServices.Metadata.Classification})">
            <summary>
            Initialize a new QueryFilter from the specified products and categories.
            </summary>
            <param name="products">The products filter</param>
            <param name="classifications">The classifications filter</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.QueryFilter.ToServerSyncFilter">
            <summary>
            Creates a ServerSyncFilter object to be used with GetRevisionIdListAsync
            </summary>
            <returns>A ServerSyncFilter instance</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.QueryFilter.Equals(System.Object)">
            <summary>
            Override Equals for 2 QueryFilter objects
            </summary>
            <param name="obj">Other QueryFilter</param>
            <returns>
            <para>True if the two QueryFilter are identical (same product and classification filters).</para>
            <para>False otherwise</para>
            </returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.QueryFilter.op_Equality(Microsoft.UpdateServices.Metadata.QueryFilter,Microsoft.UpdateServices.Metadata.QueryFilter)">
            <summary>
            Override equality operator QueryFilter objects
            </summary>
            <param name="lhs">Left QueryFilter</param>
            <param name="rhs">Right QueryFilter</param>
            <returns>
            <para>True if both lhs and rhs are QueryFilter and they contain the same classification and product filters</para>
            <para>False otherwise</para>
            </returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.QueryFilter.op_Inequality(Microsoft.UpdateServices.Metadata.QueryFilter,Microsoft.UpdateServices.Metadata.QueryFilter)">
            <summary>
            Override inequality operator QueryFilter objects
            </summary>
            <param name="lhs">Left QueryFilter</param>
            <param name="rhs">Right QueryFilter</param>
            <returns>
            <para>True if both lhs and rhs are not QueryFilter or they contain different classification and product filters</para>
            <para>False otherwise</para>
            </returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.QueryFilter.GetHashCode">
            <summary>
            Returns a hash code based on the hash codes of the contained classification and products
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.SoftwareUpdate">
            <summary>
            Reprerents a software update.
            </summary>
            <example>
            <code>
            
            // Query categories
            var categoriesSource = await server.GetCategories();
            
            // Create a filter for Windows 10 1803 updates
            var filter = new QueryFilter(
                categoriesSource.ProductsIndex.Values.Where(p => p.Title.Contains("Windows 10 version 1803 and Later")),
                categoriesSource.ClassificationsIndex.Values);
            
            // Get updates
            var metadataSource = await server.GetUpdates(filter);
            var softwareUpdates = metadataSource.UpdatesIndex.Values.OfType&lt;SoftwareUpdate&gt;();
            
            metadataSource.Delete();
            categoriesSource.Delete();
            </code>
            </example>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.SoftwareUpdate.SupportUrl">
            <summary>
            Gets the support url
            </summary>
            <value>
            Support URL string
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.SoftwareUpdate.KBArticleId">
            <summary>
            Knowledge base (KB) article ID
            </summary>
            <value>
            KB article ID string
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.SoftwareUpdate.OsUpgrade">
            <summary>
            Gets the OsUpgrade type ("swap" etc.)
            <para>
            The property is set only for operating system upgrades.
            </para>
            </summary>
            <value>
            OS upgrade type string
            </value>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.SoftwareUpdate.#ctor(Microsoft.UpdateServices.Metadata.Identity,System.Xml.Linq.XDocument)">
            <summary>
            Create a SoftwareUpdate by parsing it's properties from the specified XML and raw update data
            </summary>
            <param name="id">Update ID</param>
            <param name="xdoc">XML document with update metadata</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.SoftwareUpdate.LoadAttributesFromMetadataSource">
            <summary>
            Sets extended attributes from the XML metadata.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.SoftwareUpdate.GetPropertiesFromXml(System.Xml.Linq.XDocument)">
            <summary>
            Decode SoftwareUpdate specific properties
            </summary>
            <param name="xdoc"></param>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.SupersededUpdatesParser">
            <summary>
            Parses superseded updates information from update XML blob
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.UpdateType">
            <summary>
            The UpdateType enumeration defines various types of updates
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.UpdateType.Detectoid">
            <summary>
            <see cref="T:Microsoft.UpdateServices.Metadata.Detectoid"/>
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.UpdateType.Classification">
            <summary>
            <see cref="T:Microsoft.UpdateServices.Metadata.Classification"/>
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.UpdateType.Product">
            <summary>
            <see cref="T:Microsoft.UpdateServices.Metadata.Product"/>
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.UpdateType.Driver">
            <summary>
            <see cref="T:Microsoft.UpdateServices.Metadata.DriverUpdate"/>
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.UpdateType.Software">
            <summary>
            <see cref="T:Microsoft.UpdateServices.Metadata.SoftwareUpdate"/>
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Update">
            <summary>
            A base class for all updates stored on an upstream update server. Stores generic update metadata applicable to both categories and updates.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.Identity">
            <summary>
            Gets the update or category identity, consisting of a GUID and revision number
            </summary>
            <value>
            Update identity.
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.Title">
            <summary>
            Get the category or update title
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.IsBundle">
            <summary>
            Set for updates that bundle other updates
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.IsBundled">
            <summary>
            Set for updates that are bundled together with other updates
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.BundledUpdates">
            <summary>
            List of bundled updates
            </summary>
            <value>
            List of update identities.
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.BundleParent">
            <summary>
            Gets the update within which this update is bundled
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.HasPrerequisites">
            <summary>
            Determine if the update has prerequisites
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.HasProduct">
            <summary>
            Check if this update has a parent product
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.HasClassification">
            <summary>
            Check if this update has a classification
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.ProductIds">
            <summary>
            Gets the list of product IDs for the update
            </summary>
            <value>List of product IDs. The GUIDs map to a <see cref="T:Microsoft.UpdateServices.Metadata.Product"/></value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.ClassificationIds">
            <summary>
            Gets the list of classifications for the driver update
            </summary>
            <value>List of classification IDs. The GUIDs map to a <see cref="T:Microsoft.UpdateServices.Metadata.Classification"/></value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.Prerequisites">
            <summary>
            Get the list of prerequisites
            </summary>
            <value>
            List of prerequisites
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.IsSupersedingUpdates">
            <summary>
            Check if an update superseds other updates
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.IsSuperseded">
            <summary>
            Check if an update superseds other updates
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.SupersededUpdates">
            <summary>
            List of Update Ids superseded by an update.
            </summary>
            <value>List of update <see cref="P:Microsoft.UpdateServices.Metadata.Update.Identity"/></value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.SupersedingUpdate">
            <summary>
            Get the update that superseded this update
            </summary>
            <value>The identity of the update that superseds this update</value>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Update.IsApplicable(System.Collections.Generic.List{System.Guid})">
            <summary>
            Determines if the update is applicable based on its list of prerequisites and the list of installed updates (prerequisites) on a computer
            </summary>
            <param name="installedPrerequisites">List of installed updates on a computer</param>
            <returns>True if all prerequisites are met, false otherwise</returns>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.Description">
            <summary>
            Get the category or update description
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.HasFiles">
            <summary>
            Check if an update contains content files
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Update.Files">
            <summary>
            Gets the list of files (content) for update
            </summary>
            <value>
            List of content files
            </value>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.Update.AttributesLoaded">
            <summary>
            True if extended attributes have been loaded
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Update.FromUpdateXml(Microsoft.UpdateServices.Metadata.Identity,System.Xml.Linq.XDocument)">
            <summary>
            Construct an update from update metadata (XML)
            </summary>
            <param name="id">Update ID</param>
            <param name="xdoc">Update XML metadata</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Update.LoadAttributesFromMetadataSource">
            <summary>
            Loads extended attributes from XML. Classes that inherit should provide an implementation.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Update.GetUpdateTypeFromXml(System.Xml.Linq.XDocument)">
            <summary>
            Parses the XML and determines the actual type of the update encoded in the XML
            </summary>
            <param name="xdoc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Update.GetCategoryFromXml(System.Xml.Linq.XDocument)">
            <summary>
            For a "category" update, parses the actual category type
            </summary>
            <param name="xdoc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Update.GetDescriptionFromXml(System.Xml.Linq.XDocument)">
            <summary>
            Parse update title and description
            </summary>
            <param name="xdoc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Update.GetTitleFromXml(System.Xml.Linq.XDocument)">
            <summary>
            Parse update title and description
            </summary>
            <param name="xdoc"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.UpdateConverter">
            <summary>
            Deserialization converter that instantiates the correct update object based on the type encoded in the JSON
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Metadata.Identity">
            <summary>
            Represents the identity of an update.
            <para>An update's identity is the pair ID (Guid) - Revision (integer).</para>
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Identity.Raw">
            <summary>
            The UpdateIdentity received on the wire
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Identity.ID">
            <summary>
            Gets the ID part of the identity
            </summary>
            <value>GUID identity</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Metadata.Identity.Revision">
            <summary>
            Gets the revision part of the identity
            </summary>
            <value>Revision integer</value>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.Identity.Key1">
            <summary>
            Last 64 bits of the ID guid
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.Identity.Key2">
            <summary>
            First 64 bits of the ID guid
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Metadata.Identity.Key3">
            <summary>
            Revision number
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.#ctor">
            <summary>
            Private constructor used by the deserializer
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Re-creates the quick lookup keys after this object is deserialized. The keys are not serialized to save storage space
            </summary>
            <param name="context">Deserialization context. Not used.</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.#ctor(Microsoft.UpdateServices.WebServices.ServerSync.UpdateIdentity)">
            <summary>
            Creates an identity wrapper over the on-the-wire identity.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.GenerateQuickLookupKeys">
            <summary>
            Packs the GUID and Revision into integer values for quick comparison
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.CompareTo(System.Object)">
            <summary>
            Comparison override. 
            </summary>
            <param name="obj">The other Identity object</param>
            <returns>
            <para>-1 if this instance precedes obj in the sort order</para>
            <para>0 if this instance occurs in the same position in the sort order as obj</para>
            <para>1 if this instance follows obj in the sort order. </para>
            </returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.Equals(System.Object)">
            <summary>
            Equals override. Checks that both ID and Revision match
            </summary>
            <param name="obj">The other Identity</param>
            <returns>True if identities are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.op_Equality(Microsoft.UpdateServices.Metadata.Identity,Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Equality operator override. Matches Equals return value;
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>True if the two Identity objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.op_Inequality(Microsoft.UpdateServices.Metadata.Identity,Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Inequality operator override. The reverse of Equals.
            </summary>
            <param name="lhs">Left Identity</param>
            <param name="rhs">Right Identity</param>
            <returns>True if the two Identity objects are not equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.GetHashCode">
            <summary>
            Returns a hash code based on both ID and Revision.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Metadata.Identity.ToString">
            <summary>
            Returns a string representation of the Identity, based on ID and Revision
            </summary>
            <returns>Identity string</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Server.ContentController">
            <summary>
            MVC controller for handling content requests on an upstream updates server.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.ContentController.GetUpdateContent(System.String,System.String)">
            <summary>
            Handle HTTP GET requests on the Content/(Directory)/(FileName) URLs
            </summary>
            <param name="directory">The directory name for an update file</param>
            <param name="name">The file name for an update file</param>
            <returns>File content on success, other error codes otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.ContentController.GetUpdateContentHead(System.String,System.String)">
            <summary>
            Handle HTTP HEAD requests on the Content/(Directory)/(FileName) URLs
            </summary>
            <param name="directory">The directory name for an update file</param>
            <param name="name">The file name for an update file</param>
            <returns>File header on success, other error codes otherwise</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Server.AuthenticationWebService">
            <summary>
            Authentication service implementation; mock implementation, all requests get an authorization cookie, regardless of credentials
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.AuthenticationWebService.GetAuthorizationCookieAsync(Microsoft.UpdateServices.WebServices.DssAuthentication.GetAuthorizationCookieRequest)">
            <summary>
            Return a mock cookie
            </summary>
            <param name="request">The SOAP request for an authorization cookie</param>
            <returns>The authorization cookie</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Server.IDSSAuthAspNetCore">
            <summary>
            Declare an interface for the DSSAuthWebService (WCF) that can be used in AspNetCore with slight modifications.
            GetAuthorizationCookieAsync returns AuthorizationCookie instead of the nested GetAuthorizationCookieResult\GetAuthorizationResultBody
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Server.IReportingServiceAspNetCore">
            <summary>
            Declare an interface for the reporting web service (WCF) that can be used in AspNetCore with slight modifications.
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Server.IServerSyncAspNetCore">
            <summary>
            Declare an interface for the ServerSyncWebService (WCF) that can be used in AspNetCore with slight modifications.
            SOAP operations that return *Response\*ResponseBody are modified to return the actual data in the *ResponseBody data contract. This
            ensures proper serialization with SoapCore
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Server.ReportingWebService">
            <summary>
            Reporting service implementation.
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Server.ServerSyncWebService">
            <summary>
            Upstream update server implementation. Provides updates over the ServerSync protocol to downstream servers.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Server.ServerSyncWebService.MetadataSource">
            <summary>
            The source of upate metadata that this server serves.
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Server.ServerSyncWebService.ServiceConfiguration">
            <summary>
            Cached service configuration
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.ServerSyncWebService.#ctor(Microsoft.UpdateServices.Storage.IMetadataSource,Microsoft.UpdateServices.Metadata.MetadataFilter,Microsoft.UpdateServices.WebServices.ServerSync.ServerSyncConfigData)">
            <summary>
            Instantiate the server and serve updates from the local repo
            </summary>
            <param name="metadataSource">The update metadata source to serve updates from</param>
            <param name="filter">The filter for which updates to serve.</param>
            <param name="serviceConfig">Service configuration.</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.ServerSyncWebService.GetAuthConfigAsync(Microsoft.UpdateServices.WebServices.ServerSync.GetAuthConfigRequest)">
            <summary>
            Handle authentication data requests
            </summary>
            <param name="request">The request data. Not used</param>
            <returns>Exactly one canned authentication method</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.ServerSyncWebService.GetConfigDataAsync(Microsoft.UpdateServices.WebServices.ServerSync.GetConfigDataRequest)">
            <summary>
            Handle service configuration requests
            </summary>
            <param name="request">Service configuration request</param>
            <returns>Returns the cached service configuration of the upstream server the local repo is tracking</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.ServerSyncWebService.GetCookieAsync(Microsoft.UpdateServices.WebServices.ServerSync.GetCookieRequest)">
            <summary>
            Handle request for a cookie
            </summary>
            <param name="request">Cookie request. Not used; all requests are granted</param>
            <returns>A cookie that expires in 5 days.</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.ServerSyncWebService.GetRevisionIdListAsync(Microsoft.UpdateServices.WebServices.ServerSync.GetRevisionIdListRequest)">
            <summary>
            Return a list of update ids
            </summary>
            <param name="request">Request data. Can specify categories or updates, filters, etc.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.ServerSyncWebService.GetUpdateDataAsync(Microsoft.UpdateServices.WebServices.ServerSync.GetUpdateDataRequest)">
            <summary>
            Return metadata for updates
            </summary>
            <param name="request">The request; contains IDs for updates to retrieve metadata for</param>
            <returns>Update metadata for requested updates</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Server.UpstreamServerStartup">
            <summary>
            Startup class for a ASP.NET Core web service that implements the Server-Server sync protocol.
            <para>A web service started with UpstreamServerStartup can act as an upstream server for WSUS.</para>
            <para><see cref="T:Microsoft.UpdateServices.Client.UpstreamServerClient"/> can be used to query updates from a web service started with UpstreamServerStartup.</para>
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.UpstreamServerStartup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initialize a new instance of UpstreamServerStartup.
            </summary>
            <param name="config">
            <para>ASP.NET configuration.</para>
            
            <para>Must contain a string entry "metadata-path" with the path to the metadata source to use</para>
            
            <para>Must contain a string entry "updates-filter" with a JSON serialized updates metadata filter</para>
            
            <para>Must contain a string entry "service-config-path" with the path to the service configuration JSON</para>
            
            <para>Can contain a string entry "content-path" with the path to the content store to use if serving update content</para>
            </param>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.UpstreamServerStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Called by ASP.NET to configure services
            </summary>
            <param name="services">Service collection.
            <para>The server-server sync and authentication services are added to this list.</para>
            </param>
        </member>
        <member name="M:Microsoft.UpdateServices.Server.UpstreamServerStartup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Called by ASP.NET to configure a web app's application pipeline
            </summary>
            <param name="app">Applicatin to configure.
            <para>A SOAP endpoint is configured for this app.</para>
            </param>
            <param name="env">Hosting environment.</param>
            <param name="loggerFactory">Logging factory.</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.ContentDownloader.DownloadToFile(System.String,Microsoft.UpdateServices.Metadata.Content.UpdateFile,System.Threading.CancellationToken)">
            <summary>
            Downloads a single file belonging to an update package. Supports resuming a partial download
            </summary>
            <param name="destinationFilePath">Download destination file.</param>
            <param name="updateFile">The update file to download.</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.ContentDownloader.DownloadToStream(System.IO.Stream,Microsoft.UpdateServices.Metadata.Content.UpdateFile,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Downloads the specified URL to the destination file stream
            </summary>
            <param name="destination">The file stream to write content to</param>
            <param name="updateFile">The update to download</param>
            <param name="startOffset">Offset to resume download at</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.ContentHash">
            <summary>
            Hashes file contents and checks hashes with value expected from update file metadata
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.ContentHash.Check(Microsoft.UpdateServices.Metadata.Content.UpdateFile,System.String)">
            <summary>
            Checks that the hash of a file matches the value specified in the update file metadata
            </summary>
            <param name="updateFile">The update file object that contains the expected checksums</param>
            <param name="filePath">The path to the file to checksum</param>
            <returns>The string representatin of the hash</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.FileSystemContentStore">
            <summary>
            Downloads and stores update content as files on the local file system.
            </summary>
        </member>
        <member name="E:Microsoft.UpdateServices.Storage.FileSystemContentStore.Progress">
            <summary>
            Notifications for download progress to the content store
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.FileSystemContentStore.LocalPath">
            <summary>
            Directory under which the store structure is created
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.FileSystemContentStore.ContentDirectoryName">
            <summary>
            Root content directory name
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.FileSystemContentStore.#ctor(System.String)">
            <summary>
            Opens or creates a new file system based content store.
            If the specified directory does not exist, it will be created.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.FileSystemContentStore.Add(System.Collections.Generic.IEnumerable{Microsoft.UpdateServices.Metadata.Content.UpdateFile})">
            <summary>
            Download content
            </summary>
            <param name="files">The files to download</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.FileSystemContentStore.Contains(Microsoft.UpdateServices.Metadata.Content.UpdateFile)">
            <summary>
            Checks if an update file has been downloaded
            </summary>
            <param name="file">File to check if it was downloaded</param>
            <returns>True if the file was downloaded, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.FileSystemContentStore.Get(Microsoft.UpdateServices.Metadata.Content.UpdateFile)">
            <summary>
            Gets a read only stream for an update content file
            </summary>
            <param name="updateFile">The update file to open</param>
            <returns>Read only stream for the requested update content file</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.FileSystemContentStore.GetUpdateFileMarkerPath(Microsoft.UpdateServices.Metadata.Content.UpdateFile)">
            <summary>
            Returns the path to the file that marks whether an update content file was successfully downloaded.
            The marker file is written after the update content file is downloaded and its hash verified
            </summary>
            <param name="updateFile">Update content file for which to retrieve the marker file path</param>
            <returns>The marker file path. This file might not exist.</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.FileSystemContentStore.GetUpdateFilePath(Microsoft.UpdateServices.Metadata.Content.UpdateFile)">
            <summary>
            Given an update file, returns the path to the file in local store
            </summary>
            <param name="updateFile">The file to get the path for</param>
            <returns>Fully qualified path to the file. The path might not exist.</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.IUpdateContentSink">
            <summary>
            Defines access methods to a source of update content
            </summary>
        </member>
        <member name="E:Microsoft.UpdateServices.Storage.IUpdateContentSink.Progress">
            <summary>
            Raised on progress for long running content store operations
            </summary>
            <value>
            Progress data.
            </value>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IUpdateContentSink.Add(System.Collections.Generic.IEnumerable{Microsoft.UpdateServices.Metadata.Content.UpdateFile})">
            <summary>
            Download content
            </summary>
            <param name="files">The files to download</param>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.IUpdateContentSource">
            <summary>
            Defines access methods to a source of update content
            </summary>
        </member>
        <member name="E:Microsoft.UpdateServices.Storage.IUpdateContentSource.Progress">
            <summary>
            Raised on progress for long running content store operations
            </summary>
            <value>
            Progress data.
            </value>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IUpdateContentSource.Contains(Microsoft.UpdateServices.Metadata.Content.UpdateFile)">
            <summary>
            Checks if an update file has been downloaded
            </summary>
            <param name="file">File to check if it was downloaded</param>
            <returns>True if the file was downloaded, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IUpdateContentSource.Get(Microsoft.UpdateServices.Metadata.Content.UpdateFile)">
            <summary>
            Gets a read only stream for an update content file
            </summary>
            <param name="updateFile">The update file to open</param>
            <returns>Read only stream for the requested update content file</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.CompressedMetadataStore">
            <summary>
            Stores update metadata into a compressed file on disk. Supports storing incremental changes in metadata from a baseline.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.BaselineChecksum">
            <summary>
            The checksum of the baseline metadata source. A delta metadata source can only be merged into a baseline
            that matches this checksum
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.CompressedMetadataStore.BaselineSource">
            <summary>
            The metadata source that is the baseline for this delta metadata source
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.BaselineIndexesEnd">
            <summary>
            The largest update index present in the baseline; indexes are continuous and increasing
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.DeltaIndex">
            <summary>
            This metadata source's index in a chain of delta sources
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.BaselineIdentities">
            <summary>
            The list of updates identites that are expected to exist in the baseline
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.IsInBaseline(System.Int32)">
            <summary>
            Check if an index fall withing the range of indexes in the baseline file
            </summary>
            <param name="index">The index to check</param>
            <returns>True if the update index is present in the baseline, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.#ctor(Microsoft.UpdateServices.Storage.CompressedMetadataStore)">
            <summary>
            Creates a new metadata source as a delta from a baseline metadata source
            </summary>
            <param name="baseline"></param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.SaveBundlesIndex">
            <summary>
            Saves the bundling information to the metadata source
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.IsBundle(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update is a bundle (contains other updates)
            </summary>
            <param name="updateIdentity">The update to check</param>
            <returns>True if the update contains other updates, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.IsBundled(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update is bundled with another update
            </summary>
            <param name="updateIdentity">The update to check</param>
            <returns>True if there is another update that contains this update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetBundle(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the bundle update to which this update belongs to
            </summary>
            <param name="updateIdentity">The update whose parent bundle to get</param>
            <returns>The parent bundle</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetBundledUpdates(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the list of updates that are bundled withing the specified update
            </summary>
            <param name="updateIdentity">The update to get bundled updates for</param>
            <returns>List of bundled updates</returns>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Checksum">
            <summary>
            The checksum of the updates in the metadata source.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.ComputeChecksum">
            <summary>
            Computes the checksum of this medata source.
            The checksum is computed from the list of triples [update index, update guid, update revision], sorted by update index
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Identities">
            <summary>
            Gets the list of updates or categories returned by a query.
            </summary>
            <value>List of updates</value>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetIndex">
            <summary>
            Gets the int based index of all update identities in the metadata source
            </summary>
            <returns>Dictionary of int to Identity</returns>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Files">
            <summary>
            Files indexed by content hash
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.CompressedMetadataStore.UpdateFilesIndex">
            <summary>
            Files indexes by update index
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.ReadFilesIndex">
            <summary>
            Reads the index of files indexed by hash
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.ReadUpdateFilesIndex">
            <summary>
            Reads the index of files indexed by update index
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.HasFile(System.String)">
            <summary>
            Checks if the metadata source contains URL information for a file identified by its content checksum
            </summary>
            <param name="checksum">The file contents checksum</param>
            <returns>True if the store contains file URL information, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetFile(System.String)">
            <summary>
            Retrieves url information for a file
            </summary>
            <param name="checksum">The file checksum</param>
            <returns>Update URL information</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.HasFiles(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update contains files
            </summary>
            <param name="updateIdentity">Update identity</param>
            <returns>True if the update contains files, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetFiles(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Retrieves files for an update
            </summary>
            <param name="updateIdentity">Update identity</param>
            <returns>List of files in the update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetLeafUpdates">
            <summary>
            Gets updates that have prerequisites and no other update depends on them
            </summary>
            <returns>List of GUIDS of leaf updates</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetNonLeafUpdates">
            <summary>
            Gets updates that have prerequisites and have other updates depende on them
            </summary>
            <returns>List of GUIDS of non leaf updates</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetRootUpdates">
            <summary>
            Get updates with no prerequisites
            </summary>
            <returns>List of GUIDS of root updates</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.SavePrerequisitesIndex">
            <summary>
            Saves the prerequisites information to the metadata source
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.HasPrerequisites(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Check if an update has prerequisites
            </summary>
            <param name="updateIdentity">The update to check prerequisites for</param>
            <returns>True if an update has prerequisites, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetPrerequisites(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the list of prerequisites for an update
            </summary>
            <param name="updateIdentity">The update to get prerequisites for</param>
            <returns>List of prerequisites</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.SaveProductClassificationIndex">
            <summary>
            Saves the product and classification information to the metadata source
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetUpdateProductIds(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets an updates's product IDs
            </summary>
            <param name="updateIdentity">The update ID to get products Ids for</param>
            <returns>List of product ids for an update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetUpdateClassificationIds(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets an updates's classification IDs
            </summary>
            <param name="updateIdentity">The update ID to get classification Ids for</param>
            <returns>List of classification ids for an update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.HasProduct(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Check if this update has a parent product
            </summary>
            <param name="updateIdentity">The update to check</param>
            <returns>True if the update has a parent product, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.HasClassification(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Check if this update has a classification
            </summary>
            <param name="updateIdentity">The update to check classifications</param>
            <returns>True if the update has classifications, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.InstantiateUpdatePlaceholders">
            <summary>
            Create Update objects for all updates in this source; no metadata is loaded at this time, and each update
            is given a pointer to this source so it can load metadata on demand
            </summary>
        </member>
        <member name="E:Microsoft.UpdateServices.Storage.CompressedMetadataStore.CommitProgress">
            <summary>
            Progress notifications during the commit phase of creating an updates metadata source
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Commit">
            <summary>
            Flushes out all query results content to the output file and puts the metadata store in read mode
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.AddUpdates(System.Collections.Generic.IEnumerable{Microsoft.UpdateServices.WebServices.ServerSync.ServerSyncUpdateData})">
            <summary>
            Adds a list of updates to the query result. The XML metadata is written to disk to avoid running out of memory
            </summary>
            <param name="overTheWireUpdates">The updates to add to the result</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.AddUpdate(Microsoft.UpdateServices.Metadata.Update,System.String,System.Int32@,System.Xml.Linq.XDocument)">
            <summary>
            Adds an update to the query result. The XML metadata is written to disk to avoid running out of memory
            </summary>
            <param name="update">The updates to add to the result</param>
            <param name="updateMetadata">The update metadata to add</param>
            <param name="newUpdateIndex">The index of the new entry, if it was added to the index</param>
            <param name="updateXmlDoc">Update XML document used to load additional data if needed</param>
            <returns>True if a new entry was added, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.SetQueryFilter(Microsoft.UpdateServices.Metadata.QueryFilter)">
            <summary>
            Sets the filter used when adding updates to the metadata collection
            </summary>
            <param name="filter">Filter</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.SetCategoriesAnchor(System.String)">
            <summary>
            Sets the categories anchor for categories in this collection
            </summary>
            <param name="anchor"></param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.AddFile(Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl)">
            <summary>
            Adds an update content file URL () to the result
            </summary>
            <param name="file">The file to add</param>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.CompressedMetadataStore.SupersededUpdates">
            <summary>
            Dictionary of superseded updates; the key is a superseded update, the value is the index
            of the update that superseded it
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.CompressedMetadataStore.SupersedingUpdates">
            <summary>
            Index of updates that supersed other updates; values are list of updates being superseded
            by the key update
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.IsSuperseded(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update has been superseded
            </summary>
            <param name="updateIdentity">Update identity to check if superseded</param>
            <returns>false if not superseded, true otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetSupersedingUpdate(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the update that superseded the update specified
            </summary>
            <param name="updateIdentity">Update identity to check if superseded</param>
            <returns>The update that superseded the update specified</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetSupersedingUpdateIndex(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update has been superseded, and if yes, returns the index of the update that superseded it
            </summary>
            <param name="updateIdentity">Update identity to check if superseded</param>
            <returns>-1 if the update was not superseded, index of superseding update otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.IsSuperseding(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update superseds other updates
            </summary>
            <param name="updateIdentity">The update to check if it superseds other updates</param>
            <returns>True if the update superseds other updates, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetSupersededUpdates(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the list of update that the specified update superseds
            </summary>
            <param name="updateIdentity">The update to get list of superseded updates for</param>
            <returns>List of updates superseded by the specified update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetUpdateTitle(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Retrieves the title of an update
            </summary>
            <param name="updateIdentity"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Filters">
            <summary>
            Gets the filters used for the query. A QueryResult has exactly one filter.
            </summary>
            <value>Query filter</value>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetAnchorForFilter(Microsoft.UpdateServices.Metadata.QueryFilter)">
            <summary>
            Returns the anchor received after the last updates query that used the specified filter
            </summary>
            <param name="filter">The filter used in the query</param>
            <returns>Anchor string</returns>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Filter">
            <summary>
            The 1 filter applied to this QueryResult
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.CategoriesAnchor">
            <summary>
            Server anchor received when sync'ing categories
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.UpstreamAccountName">
            <summary>
            The account name used when updates were added to this metadata source
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.UpstreamAccountGuid">
            <summary>
            The account GUID used when updates were added to this metadata source
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.CompressedMetadataStore.InputFile">
            <summary>
            Gets the dictionary of file URLs associated with updates returned by the query, indexed by file content hash.
            </summary>
            <value>Dictionary of update files</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.FilePath">
            <summary>
            Gets the path to the file on disk that contains a serialized version of this query result.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.UpdatesIndex">
            <summary>
            Gets the updates (software, drivers) index
            </summary>
            <value>List of products</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.ClassificationsIndex">
            <summary>
            Gets the classifications index
            </summary>
            <value>List of classifications</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.DetectoidsIndex">
            <summary>
            Gets the detectoids index
            </summary>
            <value>List of detectoids</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.CategoriesIndex">
            <summary>
            Gets the categories index (products, classifications, detectoids)
            </summary>
            <value>List of categories</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.ProductsIndex">
            <summary>
            Gets the products index
            </summary>
            <value>List of updates</value>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Version">
            <summary>
            The serialization version of this object
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.CompressedMetadataStore.CurrentVersion">
            <summary>
            The current serialization version of this object
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.IsHydrated">
            <summary>
            Flag that indicates that metadata for the contained updates has been loaded.
            If false, call the Hydrate() method.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.CompressedMetadataStore.UpstreamSource">
            <summary>
            Gets the endpoint of the upstream server that is the source for this metadata source
            </summary>
        </member>
        <member name="E:Microsoft.UpdateServices.Storage.CompressedMetadataStore.ExportProgress">
            <summary>
            Progress notifications during the export operations
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.#ctor(System.String,Microsoft.UpdateServices.Client.Endpoint)">
            <summary>
            Create a new update metadata store that saves its content to the specified file
            </summary>
            <param name="storeFile">File where to save the store</param>
            <param name="upstreamSource">The upstream from which stored metadata was aquired from</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Open(System.String)">
            <summary>
            Create a QueryResult from a serialized result.
            </summary>
            <param name="queryResultFile">The file that contains a serialized query result</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetUpdateMetadataStream(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Returns a stream over the update XML metadata
            </summary>
            <param name="updateId">The update ID to get XML metadata for</param>
            <returns>Stream of the XML metadata</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetUpdateXmlPath(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Returns the path to the update XML in query result ZIP archive
            </summary>
            <param name="updateId">The update to get the path for.</param>
            <returns>A fully qualified path to the XML file belonging to the specified update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetUpdateIndex(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Returns an index for an update (number between 0 and 255) based on the update\s ID.
            </summary>
            <param name="updateId">The update to get the index for</param>
            <returns>String representation of the index</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Dispose">
            <summary>
            Deletes the temporary directory that contains XML metadata
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Delete">
            <summary>
            Delete the query result
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetCategories">
            <summary>
            Returns all categories present in the metadata store
            </summary>
            <returns>List of categories: classifications, detectoids, products</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetCategories(Microsoft.UpdateServices.Metadata.MetadataFilter)">
            <summary>
            Returns all categories that match the filter
            </summary>
            <param name="filter">Categories filter</param>
            <returns>List of categories that match the filter</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetUpdates(Microsoft.UpdateServices.Metadata.MetadataFilter)">
            <summary>
            Returns all updates that match the filter
            </summary>
            <param name="filter">Updates filter</param>
            <returns>List of updates that match the filter</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetUpdates">
            <summary>
            Returns all updates 
            </summary>
            <returns>List of updates</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.GetUpdate(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Get an update by ID
            </summary>
            <param name="updateId">The update ID to lookup</param>
            <returns>The requested update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.SetUpstreamCredentials(System.String,System.Guid)">
            <summary>
            Set the credentials used to connecto to the upstream server
            </summary>
            <param name="accountName"></param>
            <param name="AccountGuid"></param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.CompressedMetadataStore.Export(Microsoft.UpdateServices.Metadata.MetadataFilter,System.String,Microsoft.UpdateServices.Storage.RepoExportFormat,Microsoft.UpdateServices.WebServices.ServerSync.ServerSyncConfigData)">
            <summary>
            Exports the selected updates from the metadata source
            </summary>
            <param name="filter">Export filter</param>
            <param name="exportFile">Export file path</param>
            <param name="format">Export format</param>
            <param name="serverConfiguration">Server configuration.</param>
            <returns>List of categories that match the filter</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.IMetadataSink">
            <summary>
            Interface for objects that can store update metadata
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSink.Commit">
            <summary>
            Flushes out all pending changes and closes the sink. No more changes can be made to the sink after calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSink.AddUpdates(System.Collections.Generic.IEnumerable{Microsoft.UpdateServices.WebServices.ServerSync.ServerSyncUpdateData})">
            <summary>
            Adds a list of updates to the update metadata collection.
            </summary>
            <param name="overTheWireUpdates">The updates to add to the result, as received from the upstream server</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSink.SetCategoriesAnchor(System.String)">
            <summary>
            Sets the categories anchor for the categories in the metadata collection
            </summary>
            <param name="anchor"></param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSink.SetQueryFilter(Microsoft.UpdateServices.Metadata.QueryFilter)">
            <summary>
            Sets the filter used when adding updates to the metadata collection
            </summary>
            <param name="filter">Filter</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSink.AddFile(Microsoft.UpdateServices.Metadata.Content.UpdateFileUrl)">
            <summary>
            Adds an update content file URL to the metadata collection
            </summary>
            <param name="file">The file to add</param>
        </member>
        <member name="E:Microsoft.UpdateServices.Storage.IMetadataSink.CommitProgress">
            <summary>
            Event raised on progress during a long-running commit operation
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.IMetadataSource">
            <summary>
            Provides access to update metadata as well as indexes for fast queries on update metadata.
            IMetadataSource is obtained from the <see cref="T:Microsoft.UpdateServices.Client.UpstreamServerClient"/> when retrieving categories or updates.
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.UpstreamSource">
            <summary>
            Get the upstream server that this metadata source was created from
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.Filters">
            <summary>
            List of filters applied to updates when added to this metadata source
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetAnchorForFilter(Microsoft.UpdateServices.Metadata.QueryFilter)">
            <summary>
            Returns the anchor received after the last updates query that used the specified filter
            </summary>
            <param name="filter">The filter used in the query</param>
            <returns>Anchor string</returns>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.CategoriesAnchor">
            <summary>
            The upstream server anchor associated with categories stored in a metadata collection
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetCategories">
            <summary>
            Returns all categories present in the metadata store
            </summary>
            <returns>List of categories: classifications, detectoids, products</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetCategories(Microsoft.UpdateServices.Metadata.MetadataFilter)">
            <summary>
            Returns all categories that match the filter
            </summary>
            <param name="filter">Categories filter</param>
            <returns>List of categories that match the filter</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetUpdates(Microsoft.UpdateServices.Metadata.MetadataFilter)">
            <summary>
            Returns all updates that match the filter
            </summary>
            <param name="filter">Updates filter</param>
            <returns>List of updates that match the filter</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetUpdates">
            <summary>
            Returns all updates 
            </summary>
            <returns>List of updates</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetUpdate(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Get an update by ID
            </summary>
            <param name="updateId">The update ID to lookup</param>
            <returns>The requested update</returns>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.UpdatesIndex">
            <summary>
            Gets the updates (software, drivers) index
            </summary>
            <value>List of products</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.CategoriesIndex">
            <summary>
            Gets the categories index (products, classifications, detectoids)
            </summary>
            <value>List of categories</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.ClassificationsIndex">
            <summary>
            Gets the classifications index
            </summary>
            <value>List of classifications</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.DetectoidsIndex">
            <summary>
            Gets the detectoids index
            </summary>
            <value>List of detectoids</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.ProductsIndex">
            <summary>
            Gets the products index
            </summary>
            <value>List of updates</value>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetUpdateMetadataStream(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets a stream over an update's XML data
            </summary>
            <param name="updateIdentity">The update ID to get the XML metadata stream for</param>
            <returns>Metadata stream</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetUpdateProductIds(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets an updates's product IDs
            </summary>
            <param name="updateIdentity">The update ID to get products Ids for</param>
            <returns>List of product ids for an update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetUpdateClassificationIds(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets an updates's classification IDs
            </summary>
            <param name="updateIdentity">The update ID to get classification Ids for</param>
            <returns>List of classification ids for an update</returns>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.Checksum">
            <summary>
            The checksum of the updates in the metadata source.
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.SetUpstreamCredentials(System.String,System.Guid)">
            <summary>
            Set the credentials used to connec to to the upstream server
            </summary>
            <param name="accountName">Account name</param>
            <param name="AccountGuid">Account GUID</param>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.UpstreamAccountName">
            <summary>
            The account name used when updates were added to this metadata source
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.IMetadataSource.UpstreamAccountGuid">
            <summary>
            The account GUID used when updates were added to this metadata source
            </summary>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetUpdateTitle(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Retrieves the title of an update
            </summary>
            <param name="updateIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.IsBundle(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update is a bundle (contains other updates)
            </summary>
            <param name="updateIdentity">The update to check</param>
            <returns>True if the update contains other updates, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.IsBundled(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update is a bundle (contains other updates)
            </summary>
            <param name="updateIdentity">The update to check</param>
            <returns>True if the update contains other updates, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetBundledUpdates(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the list of updates that are bundled withing the specified update
            </summary>
            <param name="updateIdentity">The update to get bundled updates for</param>
            <returns>List of bundled updates</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetBundle(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the bundle update to which this update belongs to
            </summary>
            <param name="updateIdentity">The update whose parent bundle to get</param>
            <returns>List of bundle updates that contain this update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.HasPrerequisites(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Check if an update has prerequisites
            </summary>
            <param name="updateIdentity">The update to check prerequisites for</param>
            <returns>True if an update has prerequisites, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetPrerequisites(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the list of prerequisites for an update
            </summary>
            <param name="updateIdentity">The update to get prerequisites for</param>
            <returns>List of prerequisites</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.HasProduct(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Check if this update has a parent product
            </summary>
            <param name="updateIdentity">The update to check</param>
            <returns>True if the update has a parent product, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.HasClassification(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Check if this update has a classification
            </summary>
            <param name="updateIdentity">The update to check classifications</param>
            <returns>True if the update has classifications, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetFile(System.String)">
            <summary>
            Retrieves url information for a file
            </summary>
            <param name="checksum">The file checksum</param>
            <returns>Update URL information</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.HasFile(System.String)">
            <summary>
            Checks if the metadata source contains URL information for a file identified by its content checksum
            </summary>
            <param name="checksum">The file contents checksum</param>
            <returns>True if the store contains file URL information, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.HasFiles(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update contains files
            </summary>
            <param name="updateIdentity">Update identity</param>
            <returns>True if the update contains files, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetFiles(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Retrieves files for an update
            </summary>
            <param name="updateIdentity">Update identity</param>
            <returns>List of files in the update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.IsSuperseding(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update superseds other updates
            </summary>
            <param name="updateIdentity">The update to check if it superseds other updates</param>
            <returns>True if the update superseds other updates, false otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.IsSuperseded(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Checks if an update has been superseded
            </summary>
            <param name="updateIdentity">Update identity to check if superseded</param>
            <returns>false if not superseded, true otherwise</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetSupersedingUpdate(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the update that superseded the update specified
            </summary>
            <param name="updateIdentity">Update identity to check if superseded</param>
            <returns>The update that superseded the update specified</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetSupersededUpdates(Microsoft.UpdateServices.Metadata.Identity)">
            <summary>
            Gets the list of updates superseded by the specified update
            </summary>
            <param name="updateIdentity">The update to get list of superseded updates for</param>
            <returns>List of updates superseded by the specified update</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetLeafUpdates">
            <summary>
            Gets updates that have prerequisites and no other update depends on them
            </summary>
            <returns>List of GUIDS of leaf updates</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetNonLeafUpdates">
            <summary>
            Gets updates that have prerequisites and have other updates depende on them
            </summary>
            <returns>List of GUIDS of non leaf updates</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetRootUpdates">
            <summary>
            Get updates with no prerequisites
            </summary>
            <returns>List of GUIDS of root updates</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.GetIndex">
            <summary>
            Gets the int based index of all update identities in the metadata source
            </summary>
            <returns>Dictionary of int to Identity</returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.IMetadataSource.Export(Microsoft.UpdateServices.Metadata.MetadataFilter,System.String,Microsoft.UpdateServices.Storage.RepoExportFormat,Microsoft.UpdateServices.WebServices.ServerSync.ServerSyncConfigData)">
            <summary>
            Exports the selected updates from the metadata source
            </summary>
            <param name="filter">Export filter</param>
            <param name="exportFile">Export file path</param>
            <param name="format">Export format</param>
            <param name="serverConfiguration">Server configuration.</param>
            <returns>List of categories that match the filter</returns>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.RepoExportFormat">
            <summary>
            Formats for exporting from a metadata source
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.RepoExportFormat.WSUS_2016">
            <summary>
            Export to WSUS 2016 compatible format
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.OperationType">
            <summary>
            The OperationType enumeration represents, for reporting purposes, the possible sub states of an operation on a metadata source
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.Unknown">
            <summary>
            Operation initializing
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.ExportMetadataStart">
            <summary>
            Start exporting metadata
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.ExportMetadataEnd">
            <summary>
            Finished exporting metadata
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.ExportUpdateXmlBlobStart">
            <summary>
            Started exporting XML data 
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.ExportUpdateXmlBlobProgress">
            <summary>
            Progress for exporting XML data
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.ExportUpdateXmlBlobEnd">
            <summary>
            Finished exporting XML data
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.CompressExportFileStart">
            <summary>
            Started compressing the exported data
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.CompressExportFileEnd">
            <summary>
            Finished compressing the exported data
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.DownloadFileStart">
            <summary>
            Started downloading a file
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.DownloadFileProgress">
            <summary>
            Progress for downloading a file
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.DownloadFileEnd">
            <summary>
            Finished downloading a file
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.HashFileStart">
            <summary>
            Started checking the hash on a file
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.HashFileProgress">
            <summary>
            Progress of hash checking
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.HashFileEnd">
            <summary>
            Completed the hash check for a file
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.PrerequisiteGraphUpdateStart">
            <summary>
            Started updating the prerequisite graph
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.PrerequisiteGraphUpdateProgress">
            <summary>
            Progress for updating the prerequisite graph
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.PrerequisiteGraphUpdateEnd">
            <summary>
            Completed updating the prerequisite graph
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.ProcessSupersedeDataStart">
            <summary>
            Start processing superseding data
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.ProcessSupersedeDataEnd">
            <summary>
            Progress while processing superseding data
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingTitlesStart">
            <summary>
            Indexing update titles progress
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingTitlesEnd">
            <summary>
            Indexing update titles progress
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingCategoriesStart">
            <summary>
            Indexing update categories
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingCategoriesProgress">
            <summary>
            Indexing update categories
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingCategoriesEnd">
            <summary>
            Indexing update categories
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.HashMetadataStart">
            <summary>
            Compute update metadata checksum
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.HashMetadataEnd">
            <summary>
            Compute update metadata checksum
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingBundlesStart">
            <summary>
            Compute bundles index
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingBundlesEnd">
            <summary>
            Compute bundles index
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingFilesStart">
            <summary>
            Compute files index
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingFilesEnd">
            <summary>
            Compute files index
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingPrerequisitesStart">
            <summary>
            Compute prerequisites index
            </summary>
        </member>
        <member name="F:Microsoft.UpdateServices.Storage.OperationType.IndexingPrerequisitesEnd">
            <summary>
            Compute prerequisites index
            </summary>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.OperationProgress">
            <summary>
            Represents progress data for operations on local repositories
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.OperationProgress.PercentDone">
            <summary>
            Percent done. Not all operation types support progress reporting.
            </summary>
            <value>
            Percent done value, in the [0,100] range.
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.OperationProgress.Maximum">
            <summary>
            Number of work items. Reported only for operations types that support percent done reporting. 
            </summary>
            <value>
            Number of work items (updates, etc.) to process
            </value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.OperationProgress.Current">
            <summary>
            Number of work items processed. Reported only for operations that support percent done reporting.
            </summary>
            <value>
            Number of work items (updates, etc.) processed so far.</value>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.OperationProgress.CurrentOperation">
            <summary>
            The operation that is currently executing.
            </summary>
            <value>One of the possible operations from <see cref="T:Microsoft.UpdateServices.Storage.OperationType"/></value>
        </member>
        <member name="T:Microsoft.UpdateServices.Storage.ContentOperationProgress">
            <summary>
            Represents progress data for operations that process files
            </summary>
        </member>
        <member name="P:Microsoft.UpdateServices.Storage.ContentOperationProgress.File">
            <summary>
             The file being processed
            </summary>
            <value>Update file processed</value>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.WsusExport.Export(System.Collections.Generic.List{Microsoft.UpdateServices.Metadata.Update},System.String)">
            <summary>
            Exports the specified updates from a local update metadata source to a format compatible with WSUS 2016
            </summary>
            <param name="updatesToExport">The updates to export. All categories from the source are also exported</param>
            <param name="exportFilePath">The export destination file (CAB)</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.WsusExport.WriteMetadataFile(System.Collections.Generic.List{Microsoft.UpdateServices.Metadata.Update},System.String)">
            <summary>
            Creates the metadata.txt file for a list of updates to export.
            Copies update IDs and XML data to this file
            </summary>
            <param name="updatesToExport">The updates to export</param>
            <param name="metadataTextFile">Destination metadata file</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.WsusExport.WritePackagesXml(System.Collections.Generic.List{Microsoft.UpdateServices.Metadata.Update},System.String)">
            <summary>
            Writes the packages.xml file for a list of updates to export
            </summary>
            <param name="updates">The updates to export</param>
            <param name="packagesFilePath">Destination file to write the XML to</param>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.WsusExport.CreateLanguagesElement(Microsoft.UpdateServices.WebServices.ServerSync.ServerSyncConfigData)">
            <summary>
            Creates the languages XML node from supported server languages in the configuration
            </summary>
            <param name="serverConfig">The server configuration. Contains supported languages</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.WsusExport.CreateCategoriesElements">
            <summary>
            Adds categories to the export XML (detectoids, classifications and products)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.WsusExport.CreateUpdatesElements(System.Collections.Generic.List{Microsoft.UpdateServices.Metadata.Update})">
            <summary>
            Adds updates to the export XML (software, updates, etc.)
            </summary>
            <param name="updates">The updates to export</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpdateServices.Storage.WsusExport.CompleteTheListOfExportUpdates(System.Collections.Generic.List{Microsoft.UpdateServices.Metadata.Update},Microsoft.UpdateServices.Storage.IMetadataSource)">
            <summary>
            Given a list of updates to export, it finds all updates bundled with updates to be exported and adds them
            to the list as well. This is done recursively, until all bundled updates have been included
            </summary>
            <param name="updatesToExport">The updates to export. Bundled updates are added to this list</param>
            <param name="source">The update metadata to export from.</param>
        </member>
    </members>
</doc>
